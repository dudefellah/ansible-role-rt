---
# defaults file for ansible-role-rt
#
# Set the version of RT to install when rt_install is true.
rt_version: "4.4.4"

# Set to false to allow output for tasks that may expose sensitive information
rt_no_log: true

# Set to something specific if you want an alternate download URL.
# Otherwise, it will be retrieved from the official source at
# Best Practical with the use of the `rt_version` variable.
rt_download_url: null

# Installation prefix for RT. This helps determine where the files
# installed by RT go, and also on the default cpan locallib value to
# determine the installation path of any extra CPAN modules you use.
rt_prefix: /opt/rt

# Set to true to download RT before configuring it.
rt_install: true

# Packages to install as dependencies.
# When set to null, the appropriate dependencies will be guessed
# (see vars/main.yml). Set this to an empty list to prevent any
# dependencies from being installed.
rt_packages: null

# The RT web user and group are used to determine ownership of certain
# files that Apache needs access to.
rt_web_user: apache

rt_web_group: apache

# The name of the webserver service being used to service RT. This will
# probably be 'httpd' on RedHat systems or 'apache' on Debian based
# systems
rt_webserver_service_name: httpd

# The state to apply to the webserver when it needs reloading from the
# role's handler.
rt_webserver_service_restarted_state: restarted

# Options to pass to ./configure on initial build/installation
rt_configure_options:
  - --enable-graphviz
  - --enable-gd
  - --with-web-user={{ rt_web_user }}
  - --with-web-group={{ rt_web_group }}
  - --with-db-type=Pg

# Set to false to skip 'make testdeps' during install
rt_make_testdeps: true

# Set to false to prevent database initialization and/or upgrades
rt_initialize_database: true

# When this value is set, a database upgrade will be attempted at the end
# of the installation. This value should probably only be set as a one-off
# (eg. as an argument when running ansible-playbook) during the upgrade process,
# and be left null in your values files.
rt_update_source_version: null

# The username for the database admin user who will be used for installing
# the RT database. This gets passed as an environment variable to the
# database setup command(s).
#
# If you're not doing DB upgrades or updates, this value won't be used.
rt_dba_user: postgres

# The password for the database admin who will be installing the RT database.
rt_dba_password: postgres

# CPAN modules to install before the installation process installs its own
# dependencies. This can help fix issues with the CPAN modules being installed
# with 'make fixdeps'.
#
# On some distributions (eg. CentOS 7), we use the regular "cpan" command
# rather than cpanminus (combined with the cpanm module in Ansible) due to
# the fact that we want to avoid installing some cpanminus dependencies. Since
# we try to always install specific module versions, you will need to include
# the CPAN author name (eg. SULLR for IO::Socket::SSL) for the installation
# to succeed. This isn't required for distributions that use cpanm (which is
# all distributions other than CentOS 7, for now).
#
# All entries in this list have the format:
# { name: "Module::Name", version: "1.2.3" }
#
# If you're including the author name, you would include:
#
# { author: "MYAUTHOR" }
rt_cpan_modules: null

# When set, the cpanminus operations (this role will artificially fail on
# CentOS 7 if you try to have this value set to non-null due to the lack of
# cpanminus support) will install the dependency packages into the
# `rt_cpan_locallib` path.
rt_cpan_locallib: /opt/rt

# Place the full path to the source archive for your RT plugins in here.
# eg.
#  - name: RTx::Calendar
#    version: "1.03"
#  - name: RT::Authen::ExternalAuth
#    version: "0.27"
#  - name: RTx::Extension::MandatoryRequestor
#    version: "0.02"
rt_plugins: []

# Location of the cpanm (cpanminus) binary
rt_cpanm_binpath: /usr/bin/cpanm

# Extra PERL5LIB values for use during build and install
rt_extra_perllibs: []

# A list of RT_SiteConfig.pm type files. Typically, you'll want to either set
# the `dest` to either {{ rt_prefix }}/etc/RT_SiteConfig.pm or a file inside
# {{ rt_prefix }}/etc/RT_SiteConfig.d
#
# The list stricture is dicts of `{dest: <file_path>, contents: <file_contents>}`
#
# Eg.
# - dest: /opt/rt/etc/RT_SiteConfid.d/MyUrl.pm
#   content: |
#     Set($WebURL, "https://my.rt.site.com");
rt_siteconfigs: []
