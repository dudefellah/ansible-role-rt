---
# tasks file for ansible-role-rt
- name: Test for an existing RT installation
  ansible.builtin.stat:
    path: "{{ rt_prefix }}/etc/RT_Config.pm"
  register: __rt_config_st

- name: Do backups if we already have an RT install
  ansible.builtin.include_tasks: tasks/backup_rt.yml
  when:
    - "__rt_config_st.stat.exists"
    - >-
      (rt_backup_before_upgrade)
      or (rt_backup_database_before_upgrade)

- name: Create the dest dir
  ansible.builtin.file:
    path: "{{ rt_prefix }}/lib"
    mode: "0755"
    state: directory
  when:
    - "not __rt_config_st.stat.exists|bool"

- name: Create the RT etc dir
  ansible.builtin.file:
    path: "{{ rt_prefix }}/etc"
    mode: "0755"
    state: directory
  when:
    - "not __rt_config_st.stat.exists|bool"

- name: (Pre)-Configure the RT instance
  ansible.builtin.include_tasks: configure_rt.yml
  no_log: "{{ rt_no_log }}"
  loop: "{{ rt_siteconfigs }}"
  loop_control:
    loop_var: __rt_siteconfig

- name: Warn about cpan locallib setting on CentOS 7
  ansible.builtin.fail:
    msg: >-
      The `rt_cpan_locallib` value isn't respected on CentOS 7. Set that value
      to null on this platform in order to continue.
  when:
    - "ansible_distribution == 'CentOS'"
    - "ansible_distribution_major_version|int == 7"
    - "rt_cpan_locallib is not none"

# yamllint disable rule:line-length
- name: Install extra CPAN modules (CentOS 7)
  ansible.builtin.command: >-
    cpan {% if (__cm.notest | default('false')) %}-f{% endif %}
      {{ __cm.author }}/{{ __cm.name | replace('::', '-') }}-{{ __cm.version }}.tar.gz
  environment:
    PERL5LIB: "{{ _rt_perl5lib }}"
  loop: "{{ _rt_cpan_modules }}"
  loop_control:
    loop_var: __cm
  when:
    - "ansible_distribution in ['CentOS']"
    - "ansible_distribution_major_version|int == 7"
# yamllint enable rule:line-length

- name: Install any extra cpan modules
  community.general.packaging.language.cpanm:
    name: "{{ __cm.name }}"
    locallib: "{{ _rt_cpan_locallib | default(omit) }}"
    version: "{{ __cm.version }}"
    notest: "{{ __cm.notest | default(false) }}"
  environment:
    PERL5LIB: "{{ _rt_perl5lib }}"
  loop: "{{ _rt_cpan_modules }}"
  loop_control:
    loop_var: __cm
  when:
    - >-
      (ansible_distribution not in ['CentOS'])
      or (ansible_distribution_major_version|int != 7)

- name: Download RT into a tmpdir and build
  tags:
    - rt
  when:
    # If we didn't get a version and there's no RT_Config.pm found, we
    # treat this as a fresh install.
    # An existing RT_Config.pm with no __rt_installed_version implies
    # that RT was installed outside of this role and it's not appropriate
    # for the role to try to upgrade it.
    #
    # If it finds the cached version (from this role) and it doens't match
    # the configured version, we assume that we're allowed to upgrade
    # (with rt_do_upgrade set).
    - >-
      (
        (__rt_installed_version is none)
        and (__rt_config_st.stat.exists)
      )
      or (
        (__rt_installed_version != rt_version)
        and (rt_do_upgrade)
      )
  block:
    - name: Create a tempdir
      ansible.builtin.tempfile:
        state: directory
      changed_when: false
      register: tmpdir

    - name: Download RT
      ansible.builtin.unarchive:
        src: "{{ _rt_download_url }}"
        dest: "{{ tmpdir.path }}/"
        remote_src: true

    - name: Configure RT
      ansible.builtin.command: |
        ./configure --prefix {{ rt_prefix }} \
          {{ rt_configure_options | join(' ') }}
      args:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
      environment:
        PERL5LIB: "{{ _rt_perl5lib }}"
      changed_when: false

    # On CentOS 7, PERL5LIB is meaningless, since we're just letting CPAN
    # install into the system path.
    - name: Make fixdeps (w/o cpanm)
      community.general.system.make:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
        target: fixdeps
      environment:
        AUTOMATED_TESTING: "true"
        NONINTERACTIVE_TESTING: "true"
        PERL_MM_USE_DEFAULT: "1"
        PERL5LIB: "{{ _rt_perl5lib }}"
      when:
        - >-
          (
            (ansible_distribution == 'CentOS')
            and (ansible_distribution_major_version|int == 7)
          )
          or (rt_cpanm_binpath is none)

    - name: Make fixdeps (cpanm)
      community.general.system.make:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
        target: fixdeps
      environment:
        AUTOMATED_TESTING: "true"
        NONINTERACTIVE_TESTING: "true"
        PERL_MM_USE_DEFAULT: "1"
        PERL5LIB: "{{ _rt_perl5lib }}"
        RT_FIX_DEPS_CMD: "{{ rt_cpanm_binpath }}"
      when:
        - >-
          (ansible_distribution != 'CentOS')
          or (ansible_distribution_major_version|int != 7)
        - "rt_cpanm_binpath is not none"

    - name: Make testdeps
      community.general.system.make:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
        target: testdeps
      environment:
        AUTOMATED_TESTING: "true"
        PERL_MM_USE_DEFAULT: "1"
        PERL5LIB: "{{ _rt_perl5lib }}"
      when:
        - "rt_make_testdeps|bool"

    - name: Make install
      community.general.system.make:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
        target: install
      environment:
        PERL5LIB: "{{ _rt_perl5lib }}"
      notify:
        - "rt restart webserver"
      when:
        - "__rt_installed_version is none"

    # yamllint disable rule:line-length
    - name: Install extra plugins (CentOS 7)
      ansible.builtin.command: >-
        cpan {% if (__rt_plug.notest | default(false) | bool) %}-f{% endif %}
          {{ __rt_plug.author }}/{{ __rt_plug.name | replace('::', '-') }}-{{ __rt_plug.version }}.tar.gz
      environment:
        PERL5LIB: "{{ _rt_perl5lib }}"
      loop: "{{ rt_plugins }}"
      loop_control:
        loop_var: __rt_plug
      when:
        - "ansible_distribution in ['CentOS']"
        - "ansible_distribution_major_version|int == 7"

    # yamllint enable rule:line-length
    - name: Install extra plugins
      community.general.packaging.language.cpanm:
        name: "{{ __rt_plug.name }}"
        locallib: "{{ _rt_cpan_locallib | default(omit) }}"
        version: "{{ __rt_plug.version }}"
        notest: "{{ __rt_plug.notest | default(false) }}"
      environment:
        PERL5LIB: "{{ _rt_perl5lib }}"
      loop: "{{ rt_plugins }}"
      loop_control:
        loop_var: __rt_plug
      when:
        - >-
          (ansible_distribution not in ['CentOS'])
          or (ansible_distribution_major_version|int != 7)

    - name: Make upgrade
      community.general.system.make:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
        target: upgrade
      environment:
        PERL5LIB: "{{ _rt_perl5lib }}"
      notify:
        - "rt restart webserver"
      when:
        - "rt_do_upgrade"
        - "__rt_installed_version is not none"

    - name: Make initialize-database
      ansible.builtin.command:
      args:
        cmd: >-
          sbin/rt-setup-database --action init \
            {{ rt_initialize_database_args | join(' ') }}
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
      environment:
        AUTOMATED_TESTING: "true"
        PERL_MM_USE_DEFAULT: "1"
        PERL5LIB: "{{ _rt_perl5lib }}"
        RT_DBA_USER: "{{ rt_dba_user }}"
        RT_DBA_PASSWORD: "{{ rt_dba_password }}"
      no_log: "{{ rt_no_log }}"
      notify:
        - "rt restart webserver"
      when:
        - "rt_initialize_database"
        - "__rt_installed_version is none"

    # This step seems to return non-0 even when it succeeds?
    - name: Upgrade the database
      ansible.builtin.shell: |
        set -euxo pipefail && \
          /usr/bin/yes | sbin/rt-setup-database --action upgrade \
          --upgrade-from {{ __rt_installed_version }} \
          --upgrade-to {{ rt_version }}
      args:
        chdir: "{{ tmpdir.path }}/rt-{{ rt_version }}"
        # for set -o pipefail
        executable: /bin/bash
      register: __rt_database_upgrade
      failed_when:
        - "__rt_database_upgrade.stdout_lines[-1] != 'Done.'"
      environment:
        PERL_MM_USE_DEFAULT: "1"
        PERL5LIB: "{{ _rt_perl5lib }}"
        RT_DBA_USER: "{{ rt_dba_user }}"
        RT_DBA_PASSWORD: "{{ rt_dba_password }}"
      no_log: "{{ rt_no_log }}"
      when:
        - "__rt_installed_version is not none"
        - "rt_do_upgrade"

    - name: Deposit the cached version
      tags:
        - rt
      ansible.builtin.template:
        src: rt.version-cache.j2
        dest: "{{ rt_prefix }}/.rt-version"
        mode: "0644"
  always:
    - name: Clean out tmpdir
      ansible.builtin.file:
        path: "{{ tmpdir.path }}"
        state: absent
      changed_when: false
      when:
        - "not __rt_debug | default(false)"
